#!/bin/bash -e

if [ "$TRAVIS" ]; then
  if [ "$TRAVIS_PULL_REQUEST" != false ] || [ "$TRAVIS_BRANCH" != dev ]; then
    echo not deploying since this isn\'t the dev branch
    exit
  fi
fi

if [ "`git rev-parse --abbrev-ref HEAD`" = master ]; then
  echo you can\'t deploy from the master branch
  exit
fi

if ! [ -e build ]; then
  echo build directory does not exist >&2
  exit 2
fi

echo deploying...

msg="dev@`git log --pretty=oneline -n 1 --abbrev-commit`"

cp esvbible-deploy-key.enc /tmp
cp 404.html build/

git fetch origin master
git checkout FETCH_HEAD
cp -r build/* ./
rm -rf build
echo node_modules >> .git/info/exclude

if ! git diff 2>&1 1>/dev/null; then
  echo no changes, exiting
  exit
fi

git add .
git commit -am "$msg"

# if we're in a travis build, decrypt and use the deploy key (otherwise just
# rely on some existing authentication)
if [ $TRAVIS ]; then
  openssl aes-256-cbc \
    -K $encrypted_60c2c0589728_key \
    -iv $encrypted_60c2c0589728_iv \
    -in /tmp/esvbible-deploy-key.enc \
    -out esvbible-deploy-key \
    -d
  chmod 600 esvbible-deploy-key
  eval `ssh-agent -s`
  ssh-add esvbible-deploy-key
fi

git remote add ssh-origin git@github.com:esvbible/esvbible.github.io.git
git remote -v
git push ssh-origin HEAD:master

# reset to dev
if ! [ $CI ]; then
  git checkout dev
fi
